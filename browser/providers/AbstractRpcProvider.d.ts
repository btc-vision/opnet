/// <reference types="node" />
import '../serialize/BigInt.js';
import { WrappedGeneration } from '@btc-vision/transaction';
import { Network } from 'bitcoinjs-lib';
import { Block } from '../block/Block.js';
import { BlockWitnesses } from '../block/interfaces/BlockWitness.js';
import { BigNumberish, BitcoinAddressLike, BlockTag } from '../common/CommonTypes.js';
import { CallResult } from '../contracts/CallResult.js';
import { ContractData } from '../contracts/ContractData.js';
import { ICallRequestError } from '../contracts/interfaces/ICallResult.js';
import { OPNetTransactionTypes } from '../interfaces/opnet/OPNetTransactionTypes.js';
import { StoredValue } from '../storage/StoredValue.js';
import { BroadcastedTransaction } from '../transactions/interfaces/BroadcastedTransaction.js';
import { TransactionReceipt } from '../transactions/metadata/TransactionReceipt.js';
import { TransactionBase } from '../transactions/Transaction.js';
import { JsonRpcPayload } from './interfaces/JSONRpc.js';
import { JsonRpcCallResult, JsonRpcResult } from './interfaces/JSONRpcResult.js';
import { ReorgInformation } from './interfaces/ReorgInformation.js';
export declare abstract class AbstractRpcProvider {
    private nextId;
    private network;
    private chainId;
    protected constructor();
    getBlockNumber(): Promise<bigint>;
    getBlock(blockNumberOrHash: BlockTag, prefetchTxs?: boolean): Promise<Block>;
    getBlocks(blockNumbers: BlockTag[], prefetchTxs?: boolean): Promise<Block[]>;
    getBlockByHash(blockHash: string): Promise<Block>;
    getBalance(addressLike: BitcoinAddressLike, filterOrdinals?: boolean): Promise<bigint>;
    getUXTOs(address: BitcoinAddressLike, optimize?: boolean): Promise<unknown>;
    getTransaction(txHash: string): Promise<TransactionBase<OPNetTransactionTypes>>;
    getTransactionReceipt(txHash: string): Promise<TransactionReceipt>;
    getNetwork(): Promise<Network>;
    getChainId(): Promise<bigint>;
    getCode(address: BitcoinAddressLike, onlyBytecode?: boolean): Promise<ContractData | Buffer>;
    getStorageAt(address: BitcoinAddressLike, rawPointer: bigint | string, proofs?: boolean, height?: BigNumberish): Promise<StoredValue>;
    call(to: BitcoinAddressLike, data: Buffer | string, from?: BitcoinAddressLike, height?: BigNumberish): Promise<CallResult | ICallRequestError>;
    sendRawTransaction(tx: string, psbt: boolean): Promise<BroadcastedTransaction>;
    getBlockWitness(height?: BigNumberish | -1, trusted?: boolean, limit?: number, page?: number): Promise<BlockWitnesses>;
    getReorg(fromBlock?: BigNumberish, toBlock?: BigNumberish): Promise<ReorgInformation[]>;
    requestTrustedPublicKeyForBitcoinWrapping(amount: BigNumberish): Promise<WrappedGeneration>;
    abstract _send(payload: JsonRpcPayload | JsonRpcPayload[]): Promise<JsonRpcCallResult>;
    callPayloadSingle(payload: JsonRpcPayload): Promise<JsonRpcResult>;
    callMultiplePayloads(payloads: JsonRpcPayload[]): Promise<JsonRpcCallResult>;
    protected abstract providerUrl(url: string): string;
    private bufferToHex;
    private bigintToBase64;
    private buildJsonRpcPayload;
}

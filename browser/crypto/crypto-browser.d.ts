export function createHash(algo: any): import("@noble/hashes/utils").Hash<{
    A: number;
    B: number;
    C: number;
    D: number;
    E: number;
    F: number;
    G: number;
    H: number;
    get(): [number, number, number, number, number, number, number, number];
    set(A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number): void;
    process(view: DataView, offset: number): void;
    roundClean(): void;
    destroy(): void;
    readonly blockLen: number;
    outputLen: number;
    readonly padOffset: number;
    readonly isLE: boolean;
    buffer: Uint8Array;
    view: DataView;
    finished: boolean;
    length: number;
    pos: number;
    destroyed: boolean;
    update(data: import("@noble/hashes/utils").Input): any;
    digestInto(out: Uint8Array): void;
    digest(): Uint8Array;
    _cloneInto(to?: any | undefined): any;
    clone(): any;
}> | import("@noble/hashes/utils").Hash<import("@noble/hashes/sha512").SHA512>;
export function createHmac(_algo: any, key: any): import("@noble/hashes/hmac").HMAC<any>;
export function pbkdf2Sync(password: any, salt: any, iterations: any, keylen: any, _algo: any): Uint8Array;
export function randomBytes(length: any): Uint8Array;
declare namespace _default {
    export { createHash };
    export { createHmac };
    export { pbkdf2Sync };
    export { randomBytes };
}
export default _default;
